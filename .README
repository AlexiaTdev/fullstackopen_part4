# Goals part 4 Fullstack open course

## Exercise 4.1 step 1

- [x] Turn the application into a functioning npm project.
- [x] To keep your development productive, configure the application to be executed with nodemon.
- [x] You can create a new database for your application with MongoDB Atlas, or use the same database from the previous part's exercises.
- [x] Verify that it is possible to add blogs to the list with Postman or the VS Code REST client and that the application returns the added blogs at the correct endpoint.

## Exercise 4.2 step 2

- [x] Refactor the application into separate modules as shown earlier in this part of the course material.

## Exercise 4.3 Helper functions and unit tests, step 1

- [x] Define a dummy functions that returns 1
- [x] Verify that test configuration works

## Exercise 4.4 Helper functions and unit tests, step 2

- [x] Define a new totalLikes function that receives a list of blog posts as a parameter. The function returns the total sum of likes in all of the blog posts.
- [x] Write appropriate tests for the function.

## Exercise 4.5 Helper functions and unit tests, step 3

- [x] Define a new favoriteBlog function that receives a list of blogs as a parameter. The function finds out which blog has the most likes. If there are many top favorites, it is enough to return one of them.
- [x] Write the tests for this exercise inside of a new describe block.

## Exercise 4.6 Helper functions and unit tests, step 4

- [x] Define a function called mostBlogs that receives an array of blogs as a parameter. The function returns the author who has the largest amount of blogs. The return value also contains the number of blogs the top author has.
- [x] If there are many top bloggers, then it is enough to return any one of them.

## Exercise 4.7 Helper functions and unit tests, step 5

- [x] Define a function called mostLikes that receives an array of blogs as its parameter. The function returns the author, whose blog posts have the largest amount of likes. The return value also contains the total number of likes that the author has received
- [x] If there are many top bloggers, then it is enough to show any one of them

## Exercise 4.8 Blog List Tests, step 1

- [x] Use the SuperTest library for writing a test that makes an HTTP GET request to the /api/blogs URL.
- [x] Verify that the blog list application returns the correct amount of blog posts in the JSON format.
- [x] Once the test is finished, refactor the route handler to use the async/await syntax instead of promises.
- [x] define the test environment so that you can write tests that use separate databases.

## Exercise 4.9 Blog List Tests, step 2

- [x] Write a test that verifies that the unique identifier property of the blog posts is named id, by default the database names the property _id
- [x] Make the required changes to the code so that it passes the test.
- [x] The toJSON method discussed in part 3 is an appropriate place for defining the id parameter.kv

## Exercise 4.10 Blog List Tests, step 3

- [x] Write a test that verifies that making an HTTP POST request to the /api/blogs URL successfully creates a new blog post. At the very least
- [x] verify that the total number of blogs in the system is increased by one.
- [x] You can also verify that the content of the blog post is saved correctly to the database.
- [x] Once the test is finished, refactor the operation to use async/await instead of promises.

## Exercise 4.11 Blog List Tests, step 4

- [x] Write a test that verifies that if the likes property is missing from the request, it will default to the value 0.

## Exercise 4.12 Blog List Tests, step 5

- [x] Write tests related to creating new blogs via the /api/blogs endpoint, that verify that if the title or url properties are missing from the request data, the backend responds to the request with the status code 400 Bad Request.

## Exercise 4.13 Blog List Expansions, step 1

- [x] Implement functionality for deleting a single blog post resource.
- [x] Use the async/await syntax. Follow RESTful conventions when defining the HTTP API.
- [x] Implement tests for the functionality.

## Exercise 4.14 Blog List Expansions, step 2

- [x] Implement functionality for updating the information of an individual blog post. Use async/await
- [x] The application mostly needs to update the number of likes for a blog post.
- [x] Implement tests for the functionality.

## Exercise 4.15 Blog List Expansions, step 3

- [x] Implement a way to create new users by doing an HTTP POST request to address api/users. Users have a username, password and name.

## Exercise 4.16 Blog List Expansions, step 4

- [x] Add a feature which adds the following restrictions to creating new users:
  - [x] Both username and password must be given and both must be at least 3 characters long.
  - [x] The username must be unique.
- [x] The operation must respond with a suitable status code and some kind of an error message if an invalid user is created.
- [x] Also, implement tests that ensure invalid users are not created and that an invalid add user operation returns a suitable status code and error message.

## Exercise 4.17 Blog List Expansions, step 5

- [x] (POST) Modify adding new blogs so that when a new blog is created, any user from the database is designated as its creator (for example the one found first).
- [x] (GET) Expand blogs so that each blog contains information on the creator of the blog.
  - [x] Modify listing all blogs so that the creator's user information is displayed with the blog : username, name and id
  - [x] Modify listing all users also displays the blogs created by each user : url, title, author and id

## Exercise 4.18 Blog List Expansions, step 6

- [x] Implement token-based authentication to post blogs

## Exercise 4.19 Blog List Expansions, step 7

- [x] Modify adding new blogs so that it is only possible if a valid token is sent with the HTTP POST request.
- [x] The user identified by the token is designated as the creator of the blog.
