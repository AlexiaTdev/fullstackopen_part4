# Goals part 4 Fullstack open course

## Exercise 4.1 step 1

- [x] Turn the application into a functioning npm project.
- [x] To keep your development productive, configure the application to be executed with nodemon.
- [x] You can create a new database for your application with MongoDB Atlas, or use the same database from the previous part's exercises.
- [x] Verify that it is possible to add blogs to the list with Postman or the VS Code REST client and that the application returns the added blogs at the correct endpoint.

## Exercise 4.2 step 2

- [x] Refactor the application into separate modules as shown earlier in this part of the course material.

## Exercise 4.3 Helper functions and unit tests, step 1

- [x] Define a dummy functions that returns 1
- [x] Verify that test configuration works

## Exercise 4.4 Helper functions and unit tests, step 2

- [x] Define a new totalLikes function that receives a list of blog posts as a parameter. The function returns the total sum of likes in all of the blog posts.
- [x] Write appropriate tests for the function.

## Exercise 4.5 Helper functions and unit tests, step 3

- [x] Define a new favoriteBlog function that receives a list of blogs as a parameter. The function finds out which blog has the most likes. If there are many top favorites, it is enough to return one of them.
- [x] Write the tests for this exercise inside of a new describe block.

## Exercise 4.6 Helper functions and unit tests, step 4

- [x] Define a function called mostBlogs that receives an array of blogs as a parameter. The function returns the author who has the largest amount of blogs. The return value also contains the number of blogs the top author has.
- [x] If there are many top bloggers, then it is enough to return any one of them.

## Exercise 4.7 Helper functions and unit tests, step 5

- [x] Define a function called mostLikes that receives an array of blogs as its parameter. The function returns the author, whose blog posts have the largest amount of likes. The return value also contains the total number of likes that the author has received
- [x] If there are many top bloggers, then it is enough to show any one of them

## Exercise 4.8 Blog List Tests, step 1

- [x] Use the SuperTest library for writing a test that makes an HTTP GET request to the /api/blogs URL.
- [x] Verify that the blog list application returns the correct amount of blog posts in the JSON format.
- [x] Once the test is finished, refactor the route handler to use the async/await syntax instead of promises.
- [x] define the test environment so that you can write tests that use separate databases.

## Exercise 4.9 Blog List Tests, step 2

- [x] Write a test that verifies that the unique identifier property of the blog posts is named id, by default the database names the property _id
- [x] Make the required changes to the code so that it passes the test.
- [x] The toJSON method discussed in part 3 is an appropriate place for defining the id parameter.
